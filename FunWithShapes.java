class FunWithShapes extends ShapeHandler{
	
	//main()
	public static void main(String[] args) throws ShapeException {
		
		// Instantiate a FunWithShapes object
		
		FunWithShapes obj = new FunWithShapes();
		double area = obj.sumOverAreas();
		double perimeter = obj.sumOverPerimeters();
		
		System.out.println(area);
		System.out.println(perimeter);
	}
	
	//constructor
	
	public FunWithShapes() throws ShapeException{
		super();
	}
	
	//implement abstract methods in ShapeHandler
	
	public void convertDescriptionsToShapes() {
		// Iterate through shapeDescriptions (vector in shapeHandler)
		// Instantiate an appropriate Shape-type object generated by shapeHandler; store it in the shapes vector

		for(int i = 0; i < shapeDescriptions.size(); i++) {
			if(shapeDescriptions.get(i).getShapeType() == ShapeDescription.ShapeTypes.CIRCLE) {
				Shape circle = new Circle(shapeDescriptions.get(i));
				shapes.add(circle);
			}
			else if(shapeDescriptions.get(i).getShapeType() == ShapeDescription.ShapeTypes.SQUARE) {
				Shape square = new Square(shapeDescriptions.get(i));
				shapes.add(square);
			}
			else if(shapeDescriptions.get(i).getShapeType() == ShapeDescription.ShapeTypes.RECTANGLE) {
				Shape rectangle = new Rectangle(shapeDescriptions.get(i));
				shapes.add(rectangle);
			}
			else if(shapeDescriptions.get(i).getShapeType() == ShapeDescription.ShapeTypes.TRIANGLE) {
				Shape triangle = new Triangle(shapeDescriptions.get(i));
				shapes.add(triangle);
			}
			else {
				System.out.println("Shape name incorrect");
			}
		}
	
	}
	
	public double sumOverAreas() {
		// Iterate through shapes vector
		// Compute total of the shape areas and return result
		
		double areaSum = 0;
		for(int i = 0; i < shapes.size(); i++) {
			areaSum += shapes.get(i).getArea();
		}
		return areaSum;
		
		/*double areaSum = 0;
		shapes.forEach(n -> areaSum += n.getArea());
		return areaSum;*/
	}
	
	public double sumOverPerimeters() {
		// Iterate through shapes vector
		// Compute total of the shape perimeters and return result
		double perimeterSum = 0;
		for(int i = 0; i < shapes.size(); i++) {
			perimeterSum += shapes.get(i).getPerimeter();
		}
		return perimeterSum;
	}

	
}